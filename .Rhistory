fars_read_years
load_all
load_all()
(.packages())
library(devtools)
load_all()
fars_read_years()
fars_read_years
fars_read_years(015)
fars_read_years(2015)
library(fars)
fars_read_years
library(devtools)
load_all()
fars_read_years
load_all(recompile = TRUE)
fars_read_years(2041)
fars_read_years(2014)
fars_read_years(list(2014, 2015))
fars_read_years(c(2013:2015))
load_all(recompile = TRUE)
library(fars)
fars_read_years
(.packages())
library(devtools)
(.packages())
library(devtools)
(.packages())
build()
library(fars)
fars_read_years
load_all()
build()
fars_read_years
library(fars)
fars_read_years
library(devtools)
loaded_packages()
load_all()
fars_read_years
?build
installed.packages()
(.packages())
fars_read_years
install.packages("igraph")
build()
install()
(.packages())
library(devtools)
build()
getwd()
build()
install()
unlink('vignettes/fars_use_cache', recursive = TRUE)
knit_with_parameters('~/Documents/R-course/Course-3_Building_R_Packages/assignments/fars/vignettes/fars_use.Rmd')
unlink('vignettes/fars_use_cache', recursive = TRUE)
:w
library(devtools)
build()
install()
install()
library(fars)
fars_read_years(2)
fars_read_years(2014)
fars_summarize_years(years = 2014)
fars_summarize_years(years = 2013:2014)
fars_summarize_years(years = 2013:2015)
fars_summarize_years(years = list(2013,2015))
fars_map_state(51, 2015)
fars_map_state
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(paste0("~/", filename))
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(51, 2015)
build()
install()
library(fars)
fars_map_state(51, 2015)
library(fars)
(.packages())
library(devtools)
check()
?check
check()
(.packages())
library(devtoold)
library(devtools)
(.packages())
(.packages())
library(devtools)
document()
document()
build()
install()
check()
?unload()
?unload()
search()
?search
?search
.packages()
?.packages()
(.packages())
search()
The functions contained in this packages are the following:
- *`make_filename()`*
- *`fars_read()`*
- *`fars_read_years()`*
- *`fars_summarize_years()`*
- *`fars_map_state()`*
## *`make_filename()`*
Examples:
```{r make_filename}
library(fars)
make_filename(2015)
make_filename(2001)
```
```{r make_filename}
library(fars)
make_filename(2015)
make_filename(2015)
make_filename(2001)
Examples:
Examples:
```{r make_filename}
library(fars)
make_filename(2015)
make_filename(2001)
```
library(tidyverse)
check()
getwd
getwd()
knitr::knit(input = "vignettes/fars_use.Rmd", output = "vignettes/fars_use.html")
knitr::knit(input = "vignettes/fars_use.Rmd")
knitr::knit2html("vignettes/fars_use.Rmd")
knitr::render_html("vignettes/fars_use.Rmd")
knitr::render("vignettes/fars_use.Rmd")
knitr::render_latex("vignettes/fars_use.Rmd")
getwd()
knitr::render_latex("./vignettes/fars_use.Rmd")
?knitr::render_html
setwd("vignettes/")
getwd()
knitr::render_html()
list()
list.files()
build()
search()
document()
?fars_read()
?fars_map_state()
(.packages())
document()
(.packages())
library(devtools)
(.packages())
document()
use_readme_md()
use_readme_md()
(.packages())
library(devtools)
use_readme_md()
use_readme_md()
use_readme_md()
?fars_map_state()
build()
library(fars)
?fars_read()
?fars_read()
build()
?fars_read()
library(fars)
?fars_read()
detach("package:fars", unload = TRUE)
(.packages())
library(fars)
?fars_read()
?fars_read()
detach("package:fars", unload = TRUE)
(.packages())
build()
library(fars)
?fars_read()
build()
?fars_read()
(.packages())
devtools::build()
(.packages())
search()
library(fars)
?fars_read
devtools::document()
?fars_read
devtools::document()
?fars_read
(.packages())
library(devtools)
document()
build()
search()
fars_read(2016)
fars_read_years(2016)
fars_map_state(state.num = 34, year = 216)
fars_map_state(state.num = 34, year = 2106)
load_all()
ls()
make_filename(2016)
ls()
load_all()
search()
library()
library(devtools)
document()
build()
search()
make_filename(2017)
ls()
detach("package:fars", unload = TRUE)
search()
ls()
ls()
fars_map_state(51,2015)
rm(fars_map_state())
rm("man/fars_map_state")
ls()
library(fars)
fars_map_state(51,2015)
library(testthat)
ls()
expect_that(sqrt(3) * sqrt(3, equals(3)))
expect_that(sqrt(3) * sqrt(3), equals(3))
expect_that(sqrt(3) * sqrt(3), equals(34))
expect_that(sqrt(3) * sqrt(3), is_identical_to(3))
expect_that(3, is_identical_to(3))
expect_equal(sin(pi / 4), 1 / sqrt(2))
expect_equal(sin(pi / 4), 1)
test_that("model fitting", {
data(airquality)
fit <- lm(Ozone ~ Wind, data = airquality)
expect_that(fit, is_a("lm"))
expect_that(1 + 1, equals(2))
})
test_that("model fitting", {
data(airquality)
fit <- lm(Ozone ~ Wind, data = airquality)
expect_that(fit, is_a("lm"))
expect_that(1 + 1, equals(3))
})
ls()
ls()
rm("airquality")
ls()
ls("fars_map_state")
ls()
ls()
ls()
search()
library(testthat)
library(fars)
help(fars)
fars_read(201)
fars_read(2015)
?fars_read
fars_read("~/accident_2013.csv.bz2")
typeof(fars_read("~/accident_2013.csv.bz2"))
expect_that(fars_read("~/accident_2013.csv.bz2"), is_a("list"))
objects(fars_read("~/accident_2013.csv.bz2"))
typeof(fars_read("~/accident_2013.csv.bz2"))
myobk <- (fars_read("~/accident_2013.csv.bz2"))
myobj <- (fars_read("~/accident_2013.csv.bz2"))
expect_that(myobj, is_a("list"))
typeof(myobj)
is.list(myobj)
expect_that(fars_read("~/accident_2013.csv.bz2"), is_a("list"))
expect_that(fars_read("~/accident_2013.csv.bz2"), is_a("data.frame"))
test_that("test_fars", {expect_that(myobj, is_a("data.frame")) })
test_that("test_fars", {expect_that(myobj, is_a("list")) })
test_that("test_fars", {expect_that(myobj, is_a("data.frame")) })
my_test <- test_that("test_fars", {expect_that(myobj, is_a("data.frame")) })
my_test
my_test <- test_that("test_fars", {expect_that(myobj, is_a("list")) })
my_test
my_test <- test_that("test_fars", {expect_that(myobj, is_a("shit")) })
my_test
expect_that(10, equals(10 + 1e-7))
expect_that(10, equals(10 + 1e-6))
expect_that(10, equals(10 + 1))
expect_that(10, equals(10 + 1e-17))
expect_that(10, is_identical_to(10 + 1e-17))
expect_that(10, is_identical_to(10 + 1e-10))
expect_that(10, is_identical_to(10 + 1e-11))
expect_that(10, is_identical_to(10 + 1e-12))
expect_that(10, is_identical_to(10 + 1e-13))
expect_that(10, is_identical_to(10 + 1e-14))
expect_that(10, is_identical_to(10 + 1e-15))
expect_that(10, is_identical_to(10 + 1e-16))
expect_that(c("one"=1, "two"=2), is_equivalent_to(1:2))
expect_that(c("one"=1, "two"=2), is_equivalent_to(1:3))
expect_that(c("one"=1, "two"=2), is_equivalent_to(1:2))
expect_that(c("one"=1, "tw"=2), is_equivalent_to(1:2))
c("one"=1, "two"=2)
ls()
inherits(myobj)
typeof(myobj)
string <- "testing is fun!"
expect_that(string, matches("Testing"))
expect_that(string, matches("testing"))
expect_that(string, expect_match("testing"))
expect_that(string, expect_match("testing is fun!"))
string
expect_that(string, expect_match("testing is fun!"))
expect_that(string, expect_match("testing"))
expect_that(string, match("testing"))
expect_that(string, matches("testing"))
expect_that(string, matches("testingf"))
expect_that(string, matches("testing"))
expect_that(string, matches("Testing"))
expect_that(string, matches("T.+ting"))
expect_that(string, matches("t.+ting"))
expect_that(string, matches("t.+ing"))
expect_that(string, matches("t.+ingf"))
a <- list(1:10)
a
a <- list(1:10, letters)
a
a <- list(1:10, 10:1)
a
a <- list(1:10, letters)
expect_that
expect_that(str(a), prints_text("List of 2"))
prints_text("List of 2")
?prints_text
?prints_text
str(a)
a
prints_text("List of 2")
expect_that(str(a), prints_text("List of 2"))
expect_that(str(a), prints_text("List of 3"))
expect_that(library(mgcv), shows_message("This is mgcv"))
expect_that(library(igraph), shows_message("This is mgcv"))
expect_that(library(mgcv), shows_message("This is mgcv"))
expect_that(library(mgcv), shows_message("This is mgcv"))
search()
expect_that(library(mgcv), shows_message("This is mgcv"))
detach("package:mgcv", unload = TRUE)
expect_that(library(mgcv), shows_message("This is mgcv"))
detach("package:mgcv", unload = TRUE)
expect_that(library(mgcv), shows_message("This is mgcv"))
expect_that(library(mgcv), shows_message("This is mgcv"))
detach("package:mgcv", unload = TRUE)
expect_that(library(mgcv), shows_message("This is mgcv"))
detach("package:mgcv", unload = TRUE)
shows_message("This is mgcv")
?shows_message()
detach("package:mgcv", unload = TRUE)
detach("package:mgcv",
unload = TRUE)
detach("package:mgcv", unload = TRUE)
detach("package:mgcv",
shows_message("This is mgcv")
)
expect_that(library(mgcv), shows_message("This is mgcv"))
expect_that(library(mgcv), shows_message("This is mgcv"))
detach("package:mgcv",
unload = TRUE)
library(mgcv)
library(igraph)
library(mgcv)
detach("package:mgcv", unload = TRUE
detach("package:mgcv", unload = TRUE)
detach("package:mgcv", unload = TRUE)
expect_that(library(mgcv), shows_message("This is mgcv 1.8"))
log(-1)
expect_that(log(-1), givs)
expect_that(log(-1), gives_warning())
expect_that(log(-1), gives_warning())
expect_that(log(-1), gives_warning("NaNs produced"))
expect_that(log(-1), gives_warning("Se han producido NaNs"))
expect_that(log(-1), gives_warning("Se han producido NaN"))
expect_that(log(-1), gives_warning("Se han producido"))
1/2
expect_that(1/2, throws_error())
expect_that(1/"a", throws_error())
1/"a"
expect_that(1/"a", throws_error("argumento"))
expect_that(1/"a", throws_error("argumento no-numerico"))
expect_that(1/"a", throws_error("argumento no-numÃ©rico"))
expect_that(1-1 == 0, is_true())
expect_that(1-1 == 0.1, is_true())
expect_that(1/"a", throws_error("argumento"))
identical(1,1)
identical(1.1,1)
expectation(1, 1)
expectation(type = 1, message = "coÃ±o")
expectation(type = TRUE, message = "coÃ±o")
context("fars")
typeof(context("fars"))
search()
detach("package:igraph", unload = TRUE)
detach("package:mgcv", unload = TRUE)
search()
fars_read("~/accident_2013.csv.bz2")
some_file <- fars_read("~/accident_2013.csv.bz2")
typeof(some_file)
expect_that(some_file, is_a("data.table"))
expect_that(some_file, is_a("data.frame"))
my_filename <- make_filename(2001)
me
expect_that(my_filename, is_a("string"))
typeof(my_filename)
my_filename
expect_that(my_filename, is_a("character"))
expect_that(str_length(my_filename), equals(21))
library(stringi)
stri_length(my_filename)
detach("pacakge:stringi", unload = TRUE)
detach("package:stringi", unload = TRUE)
stri_length(my_filename)
require(stringi)
stri_length(my_filename)
detach("package:stringi", unload = TRUE)
fars_read_years(2100)
fars_read_years(2013)
typeof(fars_read_years(2013))
fars_read_years(2013)
expect_that(fars_read_years(2013), is_a("list"))
fars_read_years(2014)
fars_summarize_years(2014)
typeof(fars_summarize_years(2014))
expect_that(fars_summarize_years(2014), is_a("list"))
expect_that(fars_summarize_years(2014), is_a("data.frame"))
my_map <- fars_map_state(51, 2015)
my_map
typeof(my_map)
expect_that(my_map, is_a("map"))
expect_that(my_map, is_a("NULL"))
getwd()
test_file(path = "~/Documents/R-course/Course-3_Building_R_Packages/assignments/fars/tests/my_tests.R")
test_file(path = "~/Documents/R-course/Course-3_Building_R_Packages/assignments/fars/tests/my_tests.R")
test_file(path = "~/Documents/R-course/Course-3_Building_R_Packages/assignments/fars/tests/my_tests.R")
:w
test_file(path = "~/Documents/R-course/Course-3_Building_R_Packages/assignments/fars/tests/my_tests.R")
devtools::build()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::build()
search()
detach("package:devtools_shims", unload = TRUE)
library(devtools)
library(testthat)
my_filename <- make_filename(2001)
library(fars)
my_filename <- make_filename(2001)
expect_that(str_length(my_filename), equals(21))
expect_that(stri_length(my_filename), equals(21))
my_filename <- make_filename(2001)
require(stringi)
expect_that(stri_length(my_filename), equals(21))
require(stringi)
expect_that(stri_length(my_filename), equals(21))
require(stringi)
expect_that(stri_length(my_filename), equals_reference(21))
require(stringi)
expect_that(stri_length(my_filename), equals(21))
equals(21)
expect_that(my_filename, is_a("character"))
make_filename(2169)
my_filename
nchar(my_filename)
require(stringi)
expect_that(nchar(my_filename), equals(21))
(.packages())
detach("package:stringi", unload = TRUE)
detach("package:stringi", unload = TRUE)
(.packages())
(.packages())
build()
install()
document()
build()
install()
document()
