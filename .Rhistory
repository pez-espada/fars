#' fars_read_years(years = c(2013, 2015))
#' fars_read_years(years = 2013:2015)
#' fars_read_years(years = list(2013,2015))
#'
#' @export
#fars_read_years <- function(years) {
#        lapply(years, function(year) {
#                file <- make_filename(year)
#                #print(file)
#                tryCatch({
#                        dat <- fars_read(file)
#                        #head(dat)
#                        dplyr::mutate(dat, year = year) %>%
#                                dplyr::select(MONTH, year)
#                }, error = function(e) {
#                        warning("invalid year: ", year)
#                        return(NULL)
#                })
#        })
#}
#
#
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>% # the operator %>% needs to load magrittr
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
date = "2016-07-20"
year <- substr(date, 1, 4)
ls()
src <- sprintf("http://cran-logs.rstudio.com/%s/%s.csv.gz", year, date)
src
dest <- file.path("data", basename(src))
dest
src
stop("melda", src)
stop("melda ", src)
require(readr)
if(require(readr)) print("co単o!!")
if(!require(readr)) print("co単o!!")
if(!require(magrittr)) print("co単o!!")
if(!require(igraph)) print("co単o!!")
ls()
detach(name = igraph.arpack.default)
detach(name = igraph)
detach(igraph)
detach("igraph")
igraph.arpack.default()
igraph.arpack.default
igraph.console()
ls(9)
ls()
rm()
ls()
check_pkg_deps <- function() {
if(!require(readr)) {
message("installing the 'readr' package")
install.packages("readr")
}
if(!require(dplyr))
stop("the 'dplyr' package needs to be installed first")
}
check_pkg_deps()
detach("igraph")
detach("package:igraph", unload = TRUE)
check_pkg_deps()
detach("package:dplyr", unload = TRUE)
detach("package:fars", unload = TRUE)
detach("package:dplyr", unload = TRUE)
check_pkg_deps <- function() {
if(!require(readr)) {
message("installing the 'readr' package")
install.packages("readr")
}
if(!require(dplyr))
stop("the 'dplyr' package needs to be installed first")
}
check_pkg_deps()
require(igraph)
require(chuta)
library(chuta)
ls()
rm (list = ls())
ls()
(.packages())
detach(name = "igraph", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:igraph", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:magrittr", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:purr", unload = TRUE)
(.packages())
library(fars)
fars_read_years(years = 2015)
fars_read_years <- function(years) {
lapply(years, function(year = "2015") {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>% # the operator %>% needs to load magrittr
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(years = 2015)
fars_read_years <- function(years) {
lapply(years, function(year = "2015") {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>% # the operator %>% needs to load magrittr
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid puto year: ", year)
return(NULL)
})
})
}
fars_read_years(years = 2015)
library(fars)
fars_read_years(years = 2015)
history()
ls()
rm(list = ls())
lsd()
ls()
(.packages())
detach("package:fars", unload = TRUE)
(.packages())
library(fars)
fars_read_years(years = 2015)
fars_read_years(years = 2012:2015)
(.packages())
fars_read("./data/accident_2015.csv.bz2")
fars_read(filename = "~/accident_2015.csv.bz2")
fars_read("mistake_file_name")
make_filename(2098)
make_filename(year = 2017)
fars_read(filename = "data/accident_2013.csv.bz2")
fars_read(filename = "data/accident_2013.csv.bz2")
file <- make_filename(2013)
file
fars_read(filename = file)
fars_read(filename = "~/"+file)
file
append("f", file)
"f"+file
paste0("~/", file)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(paste0("~/", file))
dplyr::mutate(dat, year = year) %>% # the operator %>% needs to load magrittr
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read(filename = "data/accident_2013.csv.bz2")
fars_read_years(years = 2012:2015)
fars_read_years(years = 2013:2015)
fars_read_years(years = 2013)
fars_read_years(years = 2013)
fars_read_years(years = 2015)
year
year <- 2014
file <- make_filename(year)
file
dat <- fars_read(paste0("~/", file))
dat
file
dplyr::mutate(dat, year = year)
dplyr::mutate(dat, year = year) %>%
dplyr::mutate(dat, year=year)
library(magrittr)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
getwd()
(.packages())
library(fars)
ls()
fars_read("./data/accident_2015.csv.bz2")
fars_read(filename = "~/accident_2015.csv.bz2")
make_filname(1987)
make_filename(2001)
make_filname(1987)
make_filename(1987)
fars_read_years(2015)
fars_read_years(2013:2015)
fars_read_years(list(2013,2015))
fars_read_years
library(fars)
fars_read_years
getwd()
(.packages())
history()
library()
library(fars)
fars_read_years
update.packageStatus(object = "fars")
update.packageStatus(object = fars_map_state())
update.packageStatus(object = fars)
update.packages()
install.packages("fars")
install.packages("fars")
install.packages("fars")
install.packages("fars")
search()
(.packages())
library(devtools)
?create
(.packages())
library(fars)
fars_read_years
?document
?load_all
load_all()
fars_read_years()
fars_read_years
ls()
search()
search()
fars_read_years
library(fars)
fars_read_years
load_all
load_all()
(.packages())
library(devtools)
load_all()
fars_read_years()
fars_read_years
fars_read_years(015)
fars_read_years(2015)
library(fars)
fars_read_years
library(devtools)
load_all()
fars_read_years
load_all(recompile = TRUE)
fars_read_years(2041)
fars_read_years(2014)
fars_read_years(list(2014, 2015))
fars_read_years(c(2013:2015))
load_all(recompile = TRUE)
library(fars)
fars_read_years
(.packages())
library(devtools)
(.packages())
library(devtools)
(.packages())
build()
library(fars)
fars_read_years
load_all()
build()
fars_read_years
library(fars)
fars_read_years
library(devtools)
loaded_packages()
load_all()
fars_read_years
?build
installed.packages()
(.packages())
fars_read_years
install.packages("igraph")
build()
install()
(.packages())
library(devtools)
build()
getwd()
build()
install()
unlink('vignettes/fars_use_cache', recursive = TRUE)
knit_with_parameters('~/Documents/R-course/Course-3_Building_R_Packages/assignments/fars/vignettes/fars_use.Rmd')
unlink('vignettes/fars_use_cache', recursive = TRUE)
:w
library(devtools)
build()
install()
install()
library(fars)
fars_read_years(2)
fars_read_years(2014)
fars_summarize_years(years = 2014)
fars_summarize_years(years = 2013:2014)
fars_summarize_years(years = 2013:2015)
fars_summarize_years(years = list(2013,2015))
fars_map_state(51, 2015)
fars_map_state
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(paste0("~/", filename))
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(51, 2015)
build()
install()
library(fars)
fars_map_state(51, 2015)
library(fars)
(.packages())
library(devtools)
check()
?check
check()
(.packages())
library(devtoold)
library(devtools)
(.packages())
(.packages())
library(devtools)
document()
document()
build()
install()
check()
?unload()
?unload()
search()
?search
?search
.packages()
?.packages()
(.packages())
search()
The functions contained in this packages are the following:
- *`make_filename()`*
- *`fars_read()`*
- *`fars_read_years()`*
- *`fars_summarize_years()`*
- *`fars_map_state()`*
## *`make_filename()`*
Examples:
```{r make_filename}
library(fars)
make_filename(2015)
make_filename(2001)
```
```{r make_filename}
library(fars)
make_filename(2015)
make_filename(2015)
make_filename(2001)
Examples:
Examples:
```{r make_filename}
library(fars)
make_filename(2015)
make_filename(2001)
```
library(tidyverse)
check()
getwd
getwd()
knitr::knit(input = "vignettes/fars_use.Rmd", output = "vignettes/fars_use.html")
knitr::knit(input = "vignettes/fars_use.Rmd")
knitr::knit2html("vignettes/fars_use.Rmd")
knitr::render_html("vignettes/fars_use.Rmd")
knitr::render("vignettes/fars_use.Rmd")
knitr::render_latex("vignettes/fars_use.Rmd")
getwd()
knitr::render_latex("./vignettes/fars_use.Rmd")
?knitr::render_html
setwd("vignettes/")
getwd()
knitr::render_html()
list()
list.files()
build()
search()
document()
?fars_read()
?fars_map_state()
(.packages())
document()
(.packages())
library(devtools)
(.packages())
document()
use_readme_md()
use_readme_md()
(.packages())
library(devtools)
use_readme_md()
use_readme_md()
use_readme_md()
?fars_map_state()
build()
library(fars)
?fars_read()
?fars_read()
build()
?fars_read()
library(fars)
?fars_read()
detach("package:fars", unload = TRUE)
(.packages())
library(fars)
?fars_read()
?fars_read()
detach("package:fars", unload = TRUE)
(.packages())
build()
library(fars)
?fars_read()
build()
?fars_read()
(.packages())
devtools::build()
(.packages())
search()
library(fars)
?fars_read
devtools::document()
?fars_read
devtools::document()
?fars_read
(.packages())
library(devtools)
document()
build()
search()
fars_read(2016)
fars_read_years(2016)
fars_map_state(state.num = 34, year = 216)
fars_map_state(state.num = 34, year = 2106)
load_all()
ls()
make_filename(2016)
ls()
load_all()
search()
library()
library(devtools)
document()
build()
search()
make_filename(2017)
ls()
detach("package:fars", unload = TRUE)
search()
ls()
ls()
fars_map_state(51,2015)
rm(fars_map_state())
rm("man/fars_map_state")
ls()
library(fars)
fars_map_state(51,2015)
library(testthat)
ls()
expect_that(sqrt(3) * sqrt(3, equals(3)))
expect_that(sqrt(3) * sqrt(3), equals(3))
expect_that(sqrt(3) * sqrt(3), equals(34))
expect_that(sqrt(3) * sqrt(3), is_identical_to(3))
expect_that(3, is_identical_to(3))
expect_equal(sin(pi / 4), 1 / sqrt(2))
expect_equal(sin(pi / 4), 1)
test_that("model fitting", {
data(airquality)
fit <- lm(Ozone ~ Wind, data = airquality)
expect_that(fit, is_a("lm"))
expect_that(1 + 1, equals(2))
})
test_that("model fitting", {
data(airquality)
fit <- lm(Ozone ~ Wind, data = airquality)
expect_that(fit, is_a("lm"))
expect_that(1 + 1, equals(3))
})
ls()
ls()
rm("airquality")
ls()
ls("fars_map_state")
ls()
