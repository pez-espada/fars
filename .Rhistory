mean(loop_data$med_time)
summary(loop_data$med_time)
print("")
print("")
print("Median time of 100 runs in nanoseconds for
'my_factorial_reduce(n)' function for n = (1,...,10):")
print(reduce_data$med_time)
print("mean of the meadian times = ")
mean(reduce_data$med_time)
summary(reduce_data$med_time)
print("")
print("")
print("Median time of 100 runs in nanoseconds for
'my_factorial_func(n)' function for n = (1,...,10):")
print(func_data$med_time)
print("mean of the meadian times = ")
mean(func_data$med_time)
summary(func_data$med_time)
print("")
print("")
print("Median time of 100 runs in nanoseconds for
'my_factorial_func(n)' function for n = (1,...,10):")
print(mem_data$med_time)
print("mean of the meadian times = ")
mean(mem_data$med_time)
summary(mem_data$med_time)
print("")
print("")
# Coursera's Advanced R course R code to compute  the factorial
# of a number.
# write four different versions of 'my_factorial' function:
# 1. 'my_factorial_loop': a version that computes the factorial of an integer using
# looping (such as a for loop)
# 2. 'my_factorial_reduce': a version that computes the factorial using the reduce()
# function in the purrr package. Alternatively, you can use the Reduce() function
# in the base package.
# 3. 'my_factorial_func': a version that uses recursion to compute the factorial.
# 4. 'my_factorial_mem': a version that uses memoization to compute the factorial.
rm(list = ls())
#----------------------------------------------#
#----------------------------------------------#
# 1.
my_factorial_loop <- function(n){
result <- n
if(n == 0){
return(1)
} else {
while(n > 1){
result <- result * (n - 1)
n = n - 1
# print(result)
}
}
return(result)
}
#tests:
factorial(16)
my_factorial_loop(16)
my_factorial_loop_2 <- function(n){
result <- n
if(n == 0){
return(1)
} else {
for (i in n:2){
result = result * (i - 1)
}
}
return(result)
}
#tests:
factorial(16)
my_factorial_loop_2(16)
my_factorial_loop_2(0)
#----------------------------------------------#
#----------------------------------------------#
# 2.
library(purrr)
my_factorial_reduce <- function(n){
if(n == 0){
1
} else {
reduce(n : 1, function(x, y){
as.double(x) * y
})
}
}
#tests:
factorial(16)
my_factorial_reduce(16)
factorial(0)
my_factorial_reduce(0)
#----------------------------------------------#
#----------------------------------------------#
# 3.
my_factorial_func <- function(n){
#stopifnot(n > 0)
if(n == 0){
return(1)
} else {
(n:1)[1] * my_factorial_func(n - 1)
}
}
# test
factorial(16)
factorial(0)
my_factorial_func(16)
my_factorial_func(0)
#----------------------------------------------#
#----------------------------------------------#
# 4. meoization verision
fact_tbl <- c(1, rep(NA, 25))
my_factorial_mem <- function(n){
stopifnot(n > 0)
if(!is.na(fact_tbl[n])){
fact_tbl[n]
} else {
fact_tbl[n - 1] <<- my_factorial_mem(n - 1)
(n:1)[1] * my_factorial_func(n - 1)
}
}
## testing the factorial functions with microbenchmark:
library(purrr)
library(microbenchmark)
library(tidyr)
library(magrittr)
library(dplyr)
# data for benchmarking 'my_factorial_loop()'
loop_data <- map(1:10, function(n){microbenchmark(my_factorial_loop(n),
times = 100)$time})
names(loop_data) <- paste0(letters[1:10], 1:10)
loop_data <- as.data.frame(loop_data)
loop_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# data for benchmarking 'my_factorial_reduce()'
reduce_data <- map(1:10, function(n){microbenchmark(my_factorial_reduce(n),
times = 100)$time})
names(reduce_data) <- paste0(letters[1:10], 1:10)
reduce_data <- as.data.frame(reduce_data)
reduce_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# data for benchmarking 'my_factorial_func()'
func_data <- map(1:10, function(n){microbenchmark(my_factorial_func(n),
times = 100)$time})
names(func_data) <- paste0(letters[1:10], 1:10)
func_data <- as.data.frame(func_data)
func_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# data for benchmarking 'my_factorial_mem()'
mem_data <- map(1:10, function(n){microbenchmark(my_factorial_mem(n),
times = 100)$time})
names(mem_data) <- paste0(letters[1:10], 1:10)
mem_data <- as.data.frame(mem_data)
mem_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# plotting code:
graphics.off()
plot(1:10, (reduce_data$med_time), xlab = "My Factorial Function",
ylab = "Median Time (Nanoseconds)", pch = 18, bty = "n",
xaxt = "n", yaxt = "n", "b")
axis(1, at = 1:10)
axis(2, at = seq(0, 500000, by = 5000))
axis(2,cex.axis=1.2)
#points(1:10 + .1, reduce_data$med_time, col = "red", pch = 18)
lines(1:10 + .1, (mem_data$med_time), col = "red", pch = 18, 'b')
#points(1:10 + .1, mem_data$med_time, col = "blue", pch = 18)
lines(1:10 + .2, (loop_data$med_time), col = "blue", pch = 18, 'b')
lines(1:10 + .3, (func_data$med_time), col = "green", pch = 18, 'b')
legend(1, 3000, c("reduce", "memoized", "loop", "func"), pch = 18,
col = c("black", "blue"), bty = "n", cex = 1, y.intersp = 1.5)
# printing results
print("")
print("Median time of 100 runs in nanoseconds for
'my_factorial_loop(n)' function for n = (1,...,10):")
print(loop_data$med_time)
print("mean of the meadian times = ")
mean(loop_data$med_time)
summary(loop_data$med_time)
print("Median time of 100 runs in nanoseconds for
'my_factorial_reduce(n)' function for n = (1,...,10):")
print(reduce_data$med_time)
print("mean of the meadian times = ")
mean(reduce_data$med_time)
summary(reduce_data$med_time)
print("Median time of 100 runs in nanoseconds for
'my_factorial_func(n)' function for n = (1,...,10):")
print(func_data$med_time)
print("mean of the meadian times = ")
mean(func_data$med_time)
summary(func_data$med_time)
print("Median time of 100 runs in nanoseconds for
'my_factorial_func(n)' function for n = (1,...,10):")
print(mem_data$med_time)
print("mean of the meadian times = ")
mean(mem_data$med_time)
summary(mem_data$med_time)
bb
print("Median time of 100 runs in nanoseconds for
'my_factorial_func(n)' function for n = (1,...,10):")
source('~/Documents/R-course/Course-2_advanced-R/factorial_code.R')
source('~/Documents/R-course/Course-2_advanced-R/factorial_code.R')
source('~/Documents/R-course/Course-2_advanced-R/factorial_code.R', echo=TRUE)
source('~/Documents/R-course/Course-2_advanced-R/factorial_code.R')
# Coursera's Advanced R course R code to compute  the factorial
# of a number.
# write four different versions of 'my_factorial' function:
# 1. 'my_factorial_loop': a version that computes the factorial of an integer using
# looping (such as a for loop)
# 2. 'my_factorial_reduce': a version that computes the factorial using the reduce()
# function in the purrr package. Alternatively, you can use the Reduce() function
# in the base package.
# 3. 'my_factorial_func': a version that uses recursion to compute the factorial.
# 4. 'my_factorial_mem': a version that uses memoization to compute the factorial.
rm(list = ls())
#----------------------------------------------#
#----------------------------------------------#
# 1.
my_factorial_loop <- function(n){
result <- n
if(n == 0){
return(1)
} else {
while(n > 1){
result <- result * (n - 1)
n = n - 1
# print(result)
}
}
return(result)
}
#tests:
factorial(16)
my_factorial_loop(16)
my_factorial_loop_2 <- function(n){
result <- n
if(n == 0){
return(1)
} else {
for (i in n:2){
result = result * (i - 1)
}
}
return(result)
}
#tests:
factorial(16)
my_factorial_loop_2(16)
my_factorial_loop_2(0)
#----------------------------------------------#
#----------------------------------------------#
# 2.
library(purrr)
my_factorial_reduce <- function(n){
if(n == 0){
1
} else {
reduce(n : 1, function(x, y){
as.double(x) * y
})
}
}
#tests:
factorial(16)
my_factorial_reduce(16)
factorial(0)
my_factorial_reduce(0)
#----------------------------------------------#
#----------------------------------------------#
# 3.
my_factorial_func <- function(n){
#stopifnot(n > 0)
if(n == 0){
return(1)
} else {
(n:1)[1] * my_factorial_func(n - 1)
}
}
# test
factorial(16)
factorial(0)
my_factorial_func(16)
my_factorial_func(0)
#----------------------------------------------#
#----------------------------------------------#
# 4. meoization verision
fact_tbl <- c(1, rep(NA, 25))
my_factorial_mem <- function(n){
stopifnot(n > 0)
if(!is.na(fact_tbl[n])){
fact_tbl[n]
} else {
fact_tbl[n - 1] <<- my_factorial_mem(n - 1)
(n:1)[1] * my_factorial_func(n - 1)
}
}
## testing the factorial functions with microbenchmark:
library(purrr)
library(microbenchmark)
library(tidyr)
library(magrittr)
library(dplyr)
# data for benchmarking 'my_factorial_loop()'
loop_data <- map(1:10, function(n){microbenchmark(my_factorial_loop(n),
times = 100)$time})
names(loop_data) <- paste0(letters[1:10], 1:10)
loop_data <- as.data.frame(loop_data)
loop_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# data for benchmarking 'my_factorial_reduce()'
reduce_data <- map(1:10, function(n){microbenchmark(my_factorial_reduce(n),
times = 100)$time})
names(reduce_data) <- paste0(letters[1:10], 1:10)
reduce_data <- as.data.frame(reduce_data)
reduce_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# data for benchmarking 'my_factorial_func()'
func_data <- map(1:10, function(n){microbenchmark(my_factorial_func(n),
times = 100)$time})
names(func_data) <- paste0(letters[1:10], 1:10)
func_data <- as.data.frame(func_data)
func_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# data for benchmarking 'my_factorial_mem()'
mem_data <- map(1:10, function(n){microbenchmark(my_factorial_mem(n),
times = 100)$time})
names(mem_data) <- paste0(letters[1:10], 1:10)
mem_data <- as.data.frame(mem_data)
mem_data %<>%
gather(num, time) %>%
group_by(num) %>%
summarise(med_time = median(time))
# plotting code:
graphics.off()
plot(1:10, (reduce_data$med_time), xlab = "My Factorial Function",
ylab = "Median Time (Nanoseconds)", pch = 18, bty = "n",
xaxt = "n", yaxt = "n", "b")
axis(1, at = 1:10)
axis(2, at = seq(0, 500000, by = 5000))
axis(2,cex.axis=1.2)
#points(1:10 + .1, reduce_data$med_time, col = "red", pch = 18)
lines(1:10 + .1, (mem_data$med_time), col = "red", pch = 18, 'b')
#points(1:10 + .1, mem_data$med_time, col = "blue", pch = 18)
lines(1:10 + .2, (loop_data$med_time), col = "blue", pch = 18, 'b')
lines(1:10 + .3, (func_data$med_time), col = "green", pch = 18, 'b')
legend(1, 3000, c("reduce", "memoized", "loop", "func"), pch = 18,
col = c("black", "blue"), bty = "n", cex = 1, y.intersp = 1.5)
# printing results
print("")
print("Median time of 100 runs in nanoseconds for 'my_factorial_loop(n)' function for n = (1,...,10):")
print(loop_data$med_time)
print("mean of the meadian times = ")
print(mean(loop_data$med_time))
summary(loop_data$med_time)
print("Median time of 100 runs in nanoseconds for 'my_factorial_reduce(n)' function for n = (1,...,10):")
print(reduce_data$med_time)
print("mean of the meadian times = ")
print(mean(reduce_data$med_time))
summary(reduce_data$med_time)
print("Median time of 100 runs in nanoseconds for 'my_factorial_func(n)' function for n = (1,...,10):")
print(func_data$med_time)
print("mean of the meadian times = ")
print(mean(func_data$med_time))
summary(func_data$med_time)
print("Median time of 100 runs in nanoseconds for 'my_factorial_func(n)' function for n = (1,...,10):")
print(mem_data$med_time)
print("mean of the meadian times = ")
print(mean(mem_data$med_time))
summary(mem_data$med_time)
source('~/Documents/R-course/Course-2_advanced-R/factorial_code.R')
source('~/Documents/R-course/Course-2_advanced-R/factorial_code.R')
q()
ls()
rm(list = ls())
q()
source('~/Downloads/ch5.R')
install.packages("devtools")
install.packages("devtools")
installed.packages("roygen2")
library(roxigen2)
installed.packages("roxygen2")
install.packages("roxygen2")
q()
q()
who
ls()
library(magrittr)
q()
q()
setwd("Documents/R-course/Course-3_Building_R_Packages/assignments/fars/")
library("fars")
fars_read_years(2015)
fars_map_state(12, 2015)
library()
library(devtools)
build()
document()
document()
document()
library(devtools)
library(fars)
fars_map_state(12, 2015)
library(maps)
fars_map_state(12, 2015)
getwd
getwd()
devtools::build()
devtools::build()
document()
library(devtools)
document
document()
ls()
getwd()
library(devtools)
build()
ls()
getwd()
library(devtoll)
library(devtools)
build()
getwd()
library(devtools)
load_all()
load_all()
ls()
build()
document()
build()
build()
library(devtools)
build()
document()
document()
library(devtools)
load_all()
document()
ls()
library(devtools)
build()
document()
build()
source('~/Documents/R-course/Course-3_Building_R_Packages/assignments/fars/R/fars.R')
ls()
ls()
getwd()
q()
ls()
fars::fars_read("./accident_2013.csv.bz2")
library(devtools)
fars::fars_read("data/accident_2013.csv.bz2")
fars_read("./data/accident_2015.csv.bz2")
library(fars)
fars_read("./data/accident_2015.csv.bz2")
getwd()
fars_read("accident_2015.csv.bz2")
setwd("~")
fars_read("accident_2015.csv.bz2")
getwd()
library(fars)
fars_read("accident_2015.csv.bz2")
fars_read("accident_2015.csv.bz2")
ls
ls()
library()
library()
library(devtools)
clean_vignettes()
getwd()
setwd("Documents/R-course/Course-3_Building_R_Packages/assignments/fars/")
clean_vignettes()
clean_vignettes()
clear
library(fars)
library(fars)
library(fars)
fars_read("accident_2013.csv.bz2")
fars_read("data/accident_2013.csv.bz2")
getwd()
library(fars)
fars_read("accident_2013.csv.bz2")
fars_read("data/accident_2014.csv.bz2")
setwd("~")
library(fars)
fars_read("data/accident_2013.csv.bz2")
fars_read("./accident_2013.csv.bz2")
data("accident_2013.csv.bz2")
data("./accident_2013.csv.bz2")
library("nycflights13")
install.packages("nycflights13")
pryr::mem_used()
library("nycflights13")
invisible(flights)
pryr::mem_used()
:q
q()
q()
ls
list.files()
list.dirs()
